// DEPRECATED: This file is being kept for reference only.
// The rules have been migrated to the new Project Rules system in the .cursor/rules directory.
// Please use those rules instead as the .cursorrules file will eventually be removed by Cursor.

**General Principles**
- Be concise, technical, and provide accurate Dart/Flutter code examples.
- Use functional/declarative patterns; prefer composition over inheritance.
- Use descriptive variable names (e.g., `isLoading`, `hasError`).
- Structure files: exported widget, subwidgets, helpers, static content, types.

**Dart/Flutter**
- Use `const` constructors for immutable widgets.
- Leverage Freezed for immutable state classes and unions.
- Use arrow syntax for simple functions/methods.
- Prefer expression bodies for one-liner getters/setters.
- Use trailing commas for better formatting and diffs.
- Utilize streams for reactive programming when appropriate.
- Prefer final variables whenever possible.

**Error Handling**
- Display errors using `SelectableText.rich` (red text for visibility).
- Handle empty states in the UI.
- Manage errors/loading states in Cubit/Bloc states.
- Use try/catch blocks with specific error types when possible.
- Log errors with context using `developer.log`.

**Bloc/Cubit**
- Use Cubit for simple state, Bloc for complex event-driven state.
- Extend states with Freezed for immutability.
- Use descriptive event names.
- Handle state transitions/side effects in `mapEventToState`.
- Prefer `context.read()` for events and `context.watch()` for state in widgets.
- Dispose of subscriptions in `close()` method.
- Log state transitions for debugging.

**Firebase**
- Use Firebase Auth for authentication.
- Integrate Firestore for real-time DB with structured/normalized data.
- Use Firebase Storage for file uploads/downloads with error handling.
- Secure Firestore/Storage rules based on user roles.
- Handle Firebase exceptions with detailed logging.
- Use appropriate timestamp conversion for Firestore dates.
- Optimize security rules for performance.

**Performance**
- Use `const` widgets to optimize rebuilds.
- Optimize lists with `ListView.builder`.
- Use `AssetImage` for static images, `cached_network_image` for remote.
- Optimize Firestore queries with indexes and limits.
- Use pagination for large data sets.
- Memoize expensive calculations with `computed` property.
- Avoid rebuilds using selective state management.

**Navigation**
- Use GoRouter for navigation/deep linking.
- Define routes centrally in router.dart.
- Use named routes for clarity.
- Implement proper authentication redirection.
- Pass minimal data through route parameters.
- Handle deep linking appropriately.

**UI/Styling**
- Use Flutter's built-in widgets; create custom widgets as needed.
- Implement responsive design with `LayoutBuilder` or `MediaQuery`.
- Use `Theme.of(context).textTheme.titleLarge` instead of deprecated styles.
- Extract reusable UI components into separate widget classes.
- Use Material Design 3 components for modern UI.
- Ensure accessibility with semantic labels and sufficient contrast.

**Models/Database**
- Include `createdAt`, `updatedAt`, and `isDeleted` in Firestore docs.
- Use `@JsonSerializable(fieldRename: FieldRename.snake)` for models.
- Use `@JsonKey(includeFromJson: true, includeToJson: false)` for read-only fields.
- Implement proper timestamp conversion for Firestore dates.
- Use factory constructors for creating model instances.
- Document field constraints and validation rules.
- Keep model classes focused on a single responsibility.

**Widgets**
- Create small, private widget classes instead of `_build` methods.
- Use `RefreshIndicator` for pull-to-refresh.
- Set `textCapitalization`, `keyboardType`, and `textInputAction` in `TextField`.
- Always include `errorBuilder` in `Image.network`.
- Extract complex widget logic to separate methods.
- Prefer stateless widgets when possible.
- Use keys appropriately for widget identity.

**Miscellaneous**
- Use `log` instead of `print` for debugging.
- Use `BlocObserver` to monitor state transitions.
- Keep lines â‰¤ 80 chars; add trailing commas for multi-param functions.
- Use `@JsonValue(int)` for enums stored in DB.
- Implement proper environment configuration with .env files.
- Use appropriate asynchronous patterns (Future/async/await).
- Follow platform-specific design guidelines where appropriate.

**Code Generation**
- Use `build_runner` for Freezed/JSON serialization.
- Run `flutter pub run build_runner build --delete-conflicting-outputs` after changes.
- Keep generated files in version control.
- Document generator commands in project README.

**Documentation**
- Document complex logic and non-obvious decisions.
- Follow Flutter, Bloc, and Firebase docs for best practices.
- Add doc comments for public APIs and complex functions.
- Keep a changelog of significant changes.
- Document environment setup and requirements.
