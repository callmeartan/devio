rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidMessage() {
      let message = request.resource.data;
      return 
        message.id is string &&
        message.senderId is string &&
        message.content is string &&
        message.content.size() <= 10000 && // Limit message size
        message.timestamp is timestamp &&
        message.isAI is bool &&
        (message.senderName == null || message.senderName is string);
    }

    function isValidChatMetadata() {
      let metadata = request.resource.data;
      return 
        (!('title' in metadata) || metadata.title is string) &&
        (!('isPinned' in metadata) || metadata.isPinned is bool);
    }

    function isValidUserData() {
      let userData = request.resource.data;
      return 
        userData.displayName is string &&
        userData.email is string &&
        userData.lastSignInTime is timestamp &&
        userData.provider is string;
    }

    function debug(msg) {
      return msg;
    }

    // Users collection rules
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    match /chats/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.senderId);
      allow update: if false;
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.senderId) || 
        resource.data.senderId == request.auth.uid
      );
    }

    match /chat_metadata/{chatId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && isValidChatMetadata();
      allow delete: if isAuthenticated();
    }
  }
} 